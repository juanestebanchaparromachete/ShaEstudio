package dao;

import java.util.ArrayList;

import javax.ws.rs.core.Response;

import org.bson.Document;
import org.glassfish.jersey.internal.util.Base64;

import Security.Roles;
import utilidades.CaptainDB;
import utilidades.KeyValueSearch;
import utilidades.KeyValueSearch.SearchType;
import utilidades.MongoConnection;
import utilidades.MongoConnection.MongoQuery;
import utilidades.MongoManager;
import utilidades.ResponseCaptain;

public class AuthDao {
	
	private static String json;
	private static Response.Status status = Response.Status.OK;
	
	public static Response auth(String email, String password) {
		MongoConnection connection = CaptainDB.requestConecction();
		try {
			CaptainDB.executeQueryWithConnection(connection, new MongoQuery() {
				@Override
				public void query(MongoManager manager) {
					ArrayList<KeyValueSearch> filters = new ArrayList<KeyValueSearch>();
					filters.add(new KeyValueSearch("correo", email, SearchType.EQUALS));
					filters.add(new KeyValueSearch("clave", password, SearchType.EQUALS));
					Document piloto = manager.queryByFilters(PilotoDAO.COLECCION, filters).first();
					if(piloto != null) {
						String id = piloto.getObjectId("_id").toString();
						json = "{\"auth\":true,"
								+ "\"role\":\"pilot\","
								+ "\"name\":\"" + piloto.getString("nombre") + "\","
								+ "\"id\":\"" + id + "\","
								+ "\"accessToken\":\"Basic " + Base64.encodeAsString(id + ":" + password) + "\","
								+ "\"verificado\":" + piloto.getBoolean("verificado") + "}";
						status = Response.Status.ACCEPTED;
					} else {
						Document fbo = manager.queryByFilters(FBOsDao.COLECCION, filters).first();
						if(fbo != null) {
							String id = fbo.getObjectId("_id").toString();
							json = "{\"auth\":true,"
									+ "\"role\":\"fbo\","
									+ "\"name\":\"" + fbo.getString("nombre") + "\","
									+ "\"id\":\"" + id + "\","
									+ "\"accessToken\":\"Basic " + Base64.encodeAsString(id + ":" + password) + "\","
									+ "\"verificado\":" + fbo.getBoolean("verificado") + "}";
							status = Response.Status.ACCEPTED;
						} else {
							Document empresa = manager.queryByFilters(EmpresaDAO.COLECCION, filters).first();
							if(empresa != null) {
								String id = empresa.getObjectId("_id").toString();
								json = "{\"auth\":true,"
										+ "\"role\":\"emp\","
										+ "\"name\":\"" + empresa.getString("nombre") + "\","
										+ "\"id\":\"" + id + "\","
										+ "\"accessToken\":\"Basic " + Base64.encodeAsString(id + ":" + password) + "\","
										+ "\"verificado\":" + empresa.getBoolean("verificado") + "}";
								status = Response.Status.ACCEPTED;
							} else {
								json = "{\"auth\":false}";
								status = Response.Status.FORBIDDEN;								
							}
						}
					}
				}
			});
		} catch(Exception e) {
			e.printStackTrace();
		}
		return ResponseCaptain.buildResponse(json, status);
	}
	
	public static String authByID(String id, String token) {
		MongoConnection connection = CaptainDB.requestConecction();
		try {
			CaptainDB.executeQueryWithConnection(connection, new MongoQuery() {
				@Override
				public void query(MongoManager manager) {
					ArrayList<KeyValueSearch> filters = new ArrayList<KeyValueSearch>();
					filters.add(new KeyValueSearch("_id", id, SearchType.ID));
					filters.add(new KeyValueSearch("clave", token, SearchType.EQUALS));
					Document piloto = manager.queryByFilters(PilotoDAO.COLECCION, filters).first();
					
					if(piloto != null) {
						json = Roles.PILOT;
					} else {
						Document fbo = manager.queryByFilters(FBOsDao.COLECCION, filters).first();
						if(fbo != null) {
							json = Roles.FBO;
						} else {
							Document empresa = manager.queryByFilters(EmpresaDAO.COLECCION, filters).first();
							if(empresa != null) {
								json = Roles.EMPRESA;
							}
						}
					}
				}
			});
		} catch(Exception e) {
			e.printStackTrace();
		}
		return json;
	}

}
